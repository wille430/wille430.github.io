@function first($list) {
    @return nth($list, 1);
}

@function last($list) {
    @return nth($list, length($list));
}

// Turns multidimensional `$list` into a one-level list.
// See https://github.com/at-import/SassyLists/blob/master/stylesheets/SassyLists/_flatten.scss
@function flatten($list) {
    $result: ();

    @each $item in $list {
        @if length($item) > 1 {
            $flatten: flatten($item);

            @each $i in $flatten {
                $result: append($result, $i, list-separator($list));
            }
        } @else {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

// Insert item into list at index
// See https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#adding-values-to-a-list
@function insert-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    } @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    } @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    } @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// Remove items from lists by index
// See http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list
@function remove-nth($list, $index) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    } @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    } @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    } @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// Convert list to string
// See https://hugogiraudel.com/2014/01/27/casting-types-in-sass/#to-string
@function to-string($list) {
    @return inspect($list);
}

// Replace substring
// See https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Escape characters
// More info @ http://sassmeister.com/gist/6f21559db1fa50d48972
@function escape_symbols($str, $is_partial: false) {
    @if str-length($str) == 0 {
        @return $str;
    }

    $allowed: '-', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9';
    $not_allowed_as_first: '_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9';
    $escaped: '';

    @for $i from 1 through str-length($str) {
        @if (index($allowed, str-slice($str, $i, $i)) == null or ($is_partial == false and $i == 1 and index($not_allowed_as_first, str-slice($str, $i, $i)) != null)) {
            $escaped: $escaped + ('\\' + str-slice($str, $i, $i));
        } @else {
            $escaped: $escaped + str-slice($str, $i, $i);
        }
    }

    // handle special -- case
    @if ($is_partial == false and str-slice($str, 1, 2) == '--') {
        $escaped: '\\' + $escaped;
    }

    @return $escaped;
}
