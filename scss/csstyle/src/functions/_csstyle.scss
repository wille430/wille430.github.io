$_csstyle_has_root_id: false;
$_csstyle_has_html_tag: false;
$_csstyle_important: false;

@function _csstyle_compile_options($option_rules) {
    $options: ();

    @each $alternatives in $option_rules {
        @if length($options) > 0 {
            $new_options: ();

            @each $option in $options {
                @each $alt in $alternatives {
                    $new_options: append($new_options, $option + option($alt))
                }
            }

            $options: $new_options;
        } @else {
            @each $alt in $alternatives {
                $options: append($options, option($alt))
            }
        }
    }

    @if length($options) > 0 {
        $_csstyle_has_html_tag: true !global;
    }

    @return $options;
}

@function _csstyle_apply_options($selector) {
    $first: first($_csstyle_rules);
    $last: last($_csstyle_rules);

    $components: map-get($last, 'component');
    $tweaks: map-get($last, 'tweak');
    $locations: map-get($first, 'location');
    $options: map-get($last, 'options');
    $option_rules: _csstyle_compile_options($options);
    $selector: selector-parse($selector);
    $compiled: ();
    $modifyables: ();
    $type: 'location';

    @if length($locations) > 0 {
        $modifyables: $locations;
    } @else if length($tweaks) > 0 {
        $modifyables: $tweaks;
        $type: 'tweak';
    } @else if length($components) > 0 {
        $modifyables: $components;
        $type: 'component';
    }

    @each $component in $modifyables {
        @each $identifier in $selector {
            $identifier: to-string($identifier);
            $componentStartIndex: null;

            @if $type == 'component' {
                $componentStartIndex: str-index($identifier,  component($component));
            } @else if $type == 'tweak' {
                $componentStartIndex: str-index($identifier, tweak($component));
            } @else if $type == 'location' {
                $componentStartIndex: str-index($identifier, location($component));
            }

            @if $componentStartIndex != null {
                $component: str-slice($identifier, $componentStartIndex);
                $dotIndex: str-index(str-slice(str-replace($component, '\\.', 'dd'), 2), '.');
                $spaceIndex: str-index($component, ' ');
                $componentEndIndex: str-length($component);

                $dotIndex: if($dotIndex == null, null, $dotIndex + 1);

                @if ($dotIndex != null) and ($spaceIndex != null) {
                    $componentEndIndex: if($dotIndex < $spaceIndex, $dotIndex - 1, $spaceIndex - 1);
                } @else if $dotIndex != null {
                    $componentEndIndex: $dotIndex - 1;
                } @else if $spaceIndex != null {
                    $componentEndIndex: $spaceIndex - 1;
                }

                $component: str-slice($component, 1, $componentEndIndex);

                @each $option in $option_rules {
                    $compiled: append($compiled, str-insert($identifier, $option, $componentStartIndex + $componentEndIndex), comma);
                }
            }
        }
    }

    @return $compiled;
}

@function _csstyle_compile_parts($part_rules) {
    $parts: ();

    @each $alternatives in $part_rules {
        @if length($parts) > 0 {
            $new_parts: ();

            @each $part in $parts {
                @each $alt in $alternatives {
                    $new_parts: append($new_parts, $part + part($alt));
                }
            }

            $parts: $new_parts;
        } @else {
            @each $alt in $alternatives {
                $parts: append($parts, part($alt))
            }
        }
    }

    @return $parts;
}

@function _csstyle_compile_component($component, $parts, $options) {
    $selector: '';
    $component: component($component);
    $parts: _csstyle_compile_parts($parts);
    $options: _csstyle_compile_options($options);

    @each $part in $parts {
        @each $option in $options {
            $selector: $selector + $component + $part + $option;

            @if $option != last($options) {
                $selector: $selector + ', ';
            }
        }

        @if length($options) == 0 {
            $selector: $selector + $component + $part;
        }

        @if $part != last($parts) {
            $selector: $selector + ', ';
        }
    }

    @if length($parts) == 0 {
        @if length($options) == 0 {
            @return $component;
        }

        @each $option in $options {
            $selector: $selector + $component + $option;

            @if $option != last($options) {
                $selector: $selector + ', ';
            }
        }
    }

    @return $selector;
}

@function _csstyle_compile_tweak($tweak, $parts, $options) {
    $_csstyle_has_root_id: true !global;
    $selector: '';
    $tweak: tweak($tweak);
    $parts: _csstyle_compile_parts($parts);
    $options: _csstyle_compile_options($options);

    @each $part in $parts {
        @each $option in $options {
            $selector: $selector + $tweak + $part + $option;

            @if $option != last($options) {
                $selector: $selector + ', ';
            }
        }

        @if length($options) == 0 {
            $selector: $selector + $tweak + $part;
        }

        @if $part != last($parts) {
            $selector: $selector + ', ';
        }
    }

    @if length($parts) == 0 {
        @if length($options) == 0 {
            @return $tweak;
        }

        @each $option in $options {
            $selector: $selector + $tweak + $option;

            @if $option != last($options) {
                $selector: $selector + ', ';
            }
        }
    }

    @return $selector;
}

@function _csstyle_compile_location($location, $options) {
    $selector: '';
    $location: location($location);
    $options: _csstyle_compile_options($options);

    @if length($options) == 0 {
        @return $location;
    }

    @each $option in $options {
        $selector: $selector + $location + $option;

        @if $option != last($options) {
            $selector: $selector + ', ';
        }
    }

    @return $selector;
}

@function _csstyle_compile_rule($rule) {
    $selector: '';
    $locations: if(type-of($rule) == 'map', map-get($rule, 'location'), ());
    $tweaks: if(type-of($rule) == 'map', map-get($rule, 'tweak'), ());
    $components: if(type-of($rule) == 'map', map-get($rule, 'component'), ());
    $parts: if(type-of($rule) == 'map', map-get($rule, 'parts'), ());
    $options: if(type-of($rule) == 'map', map-get($rule, 'options'), ());

    @if length($components) > 0 {
        @each $component in $components {
            $selector: $selector + _csstyle_compile_component($component, $parts, $options);

            @if $component != last($components) {
                $selector: $selector + ', ';
            }
        }

        @return $selector;
    }

    @if length($tweaks) > 0 {
        @each $tweak in $tweaks {
            $selector: $selector + _csstyle_compile_tweak($tweak, $parts, $options);

            @if $tweak != last($tweaks) {
                $selector: $selector + ', ';
            }
        }

        @return $selector;
    }

    @each $location in $locations {
        $selector: $selector + _csstyle_compile_location($location, $options);

        @if $location != last($locations) {
            $selector: $selector + ', ';
        }
    }

    @return $selector;
}

@function _csstyle_compile() {
    $selector: '';
    $parent: if(length($_csstyle_rules) > 0, if(type-of(last($_csstyle_rules)) == 'map', map-get(last($_csstyle_rules), 'parent'), ''), '');
    $_csstyle_has_root_id: false !global;
    $_csstyle_has_html_tag: false !global;

    @if ($parent == '') {
        @each $rule in $_csstyle_rules {
            @if $selector == '' {
                $selector: _csstyle_compile_rule($rule);
            } @else {
                $selector: selector-nest($selector, _csstyle_compile_rule($rule));
            }
        }
    } @else {
        $selector: selector-nest($parent, _csstyle_compile_rule(last($_csstyle_rules)));
    }

    $selector-str: to-string($selector);

    @if str-index($selector-str, html + '#' + $csstyle-root-id) != null {
        @return selector-parse($selector);
    }

    @if str-index($selector-str, '#' + $csstyle-root-id) != null {
        @if $_csstyle_has_html_tag or $_csstyle_important {
            @return selector-replace($selector, '#' + $csstyle-root-id, html + '#' + $csstyle-root-id);
        }

        @return selector-parse($selector);
    }

    @if str-index($selector-str, html) != null {
        @if $_csstyle_has_root_id or $_csstyle_important {
            @return selector-replace($selector, html, html + '#' + $csstyle-root-id);
        }

        @return selector-parse($selector);
    }

    @if ($_csstyle_has_root_id and $_csstyle_has_html_tag) or $_csstyle_important {
        @return selector-parse(selector-nest(html + '#' + $csstyle-root-id, $selector));
    }

    @if $_csstyle_has_root_id and not $_csstyle_has_html_tag {
        @return selector-parse(selector-nest('#' + $csstyle-root-id, $selector));
    }

    @if $_csstyle_has_html_tag and not $_csstyle_has_root_id {
        @return selector-parse(selector-nest(html, $selector));
    }

    @return selector-parse($selector);
}
